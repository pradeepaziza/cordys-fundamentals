/*
  This class has been generated by the Code Generator
*/

package com.orderdb;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.classinfo.AttributeInfo;
import com.cordys.cpc.bsf.classinfo.ClassInfo;
import com.cordys.cpc.bsf.classinfo.RelationInfo_FK;
import com.cordys.cpc.bsf.listeners.constraint.NumberValidator;
import com.cordys.cpc.bsf.listeners.constraint.StringValidator;


public abstract class RegionBase extends com.cordys.cpc.bsf.busobject.StateBusObject
{
    // tags used in the XML document
    public final static String ATTR_RegionID = "RegionID";
    public final static String ATTR_RegionDescription = "RegionDescription";
    private final static String REL_TerritoriesObjects = "FK:Region[RegionID]:Territories[RegionID]";
    private static ClassInfo s_classInfo = null;
    public static ClassInfo _getClassInfo()//NOPMD framework ensures this is thread safe
    {
        if ( s_classInfo == null )//NOPMD
        {
            s_classInfo = newClassInfo(Region.class);
            s_classInfo.setTableName("Region");
            s_classInfo.setUIDElements(new String[]{ATTR_RegionID});
            {
                AttributeInfo ai = new AttributeInfo(ATTR_RegionID);
                ai.setJavaName("RegionID");
                ai.setColumnName("RegionID");
                ai.setAttributeClass(int.class);
                NumberValidator v = new NumberValidator(ATTR_RegionID);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_RegionDescription);
                ai.setJavaName("RegionDescription");
                ai.setColumnName("RegionDescription");
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_RegionDescription);
                v.setMaxLength(50);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                // relation TerritoriesObjects (FK:Region[RegionID]:Territories[RegionID])
                RelationInfo_FK ri = new RelationInfo_FK(REL_TerritoriesObjects);
                ri.setName("TerritoriesObjects");
                ri.setLocalAttributes(new String[]{"RegionID"});
                ri.setLocalIsPK(true);
                ri.setRelatedClass(com.orderdb.Territories.class);
                ri.setRelatedAttributes(new String[]{"RegionID"});
                ri.setRelatedIdentifier("FK:Territories[RegionID]:Region[RegionID]");
                ri.setLoadMethod("loadTerritoriesObjects");
                s_classInfo.addRelationInfo(ri);
            }
        }
        return s_classInfo;
    }

    public RegionBase(BusObjectConfig config)
    {
        super(config);
    }

    public int getRegionID()
    {
        return getIntProperty(ATTR_RegionID);
    }

    public void setRegionID(int value)
    {
        setProperty(ATTR_RegionID, value, 0);
    }

    public String getRegionDescription()
    {
        return getStringProperty(ATTR_RegionDescription);
    }

    public void setRegionDescription(String value)
    {
        setProperty(ATTR_RegionDescription, value, 0);
    }

    public BusObjectIterator<Territories> getTerritoriesObjects()
    {
        return getMultiRelationObjects(REL_TerritoriesObjects);
    }
    public BusObjectIterator<Territories> loadTerritoriesObjects()
    {
        String queryText = "select * from \"Territories\" where \"RegionID\" = :RegionID";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("RegionID", "Territories.RegionID", QueryObject.PARAM_INT, new Integer(getRegionID()));
        query.setResultClass(Territories.class);
        return query.getObjects();
    }


    public void addTerritoriesObject(Territories a_Territories)
    {
        a_Territories.setRegionID(this.getRegionID());
    }

    public void removeTerritoriesObject(Territories a_Territories)
    {
        a_Territories.setNull("RegionID");
    }

    public static BusObjectIterator<com.orderdb.Region> getNextRegionObjects(int RegionID, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        String queryText = "select * from \"Region\" where (\"RegionID\" > :RegionID) order by \"RegionID\" asc";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("RegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(RegionID));
        query.setResultClass(Region.class);
        query.setCursor(cursor);
        return query.getObjects();
    }

    public static BusObjectIterator<com.orderdb.Region> getPreviousRegionObjects(int RegionID, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        String queryText = "select * from \"Region\" where (\"RegionID\" < :RegionID) order by \"RegionID\" desc";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("RegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(RegionID));
        query.setResultClass(Region.class);
        query.setCursor(cursor);
        return query.getObjects();
    }

    public static com.orderdb.Region getRegionObject(int RegionID)
    {
        String queryText = "select * from \"Region\" where \"RegionID\" = :RegionID";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("RegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(RegionID));
        query.setResultClass(Region.class);
        return (Region)query.getObject();
    }

    public static BusObjectIterator<com.orderdb.Region> getRegionObjects(int fromRegionID, int toRegionID, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        String queryText = "select * from \"Region\" where \"RegionID\" between :fromRegionID and :toRegionID";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("fromRegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(fromRegionID));
        query.addParameter("toRegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(toRegionID));
        query.setResultClass(Region.class);
        query.setCursor(cursor);
        return query.getObjects();
    }

    public static BusObjectIterator<com.orderdb.Region> getRegionObjects(int fromRegionID, int toRegionID)
    {
        String queryText = "select * from \"Region\" where \"RegionID\" between :fromRegionID and :toRegionID";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("fromRegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(fromRegionID));
        query.addParameter("toRegionID", "Region.RegionID", QueryObject.PARAM_INT, new Integer(toRegionID));
        query.setResultClass(Region.class);
        return query.getObjects();
    }

}
